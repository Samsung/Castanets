// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chromeos.assistant.mojom;

import "mojo/public/mojom/base/time.mojom";
import "url/mojom/url.mojom";

// Models a notification button.
struct AssistantNotificationButton {
  // Display text of the button.
  string label;

  // Optional URL to open when the tap action is invoked on the button.
  url.mojom.Url action_url;

  // If |true|, the associated notification will be removed on button click.
  bool remove_notification_on_click = true;
};

// Enumeration of possible notification priorities.
// NOTE: This enum maps to a subset of message_center::NotificationPriority.
enum AssistantNotificationPriority {
  kLow,     // See message_center::NotificationPriority::LOW_PRIORITY.
  kDefault, // See message_center::NotificationPriority::DEFAULT_PRIORITY.
  kHigh,    // See message_center::NotificationPriority::HIGH_PRIORITY.
};

// Models an Assistant notification.
struct AssistantNotification {
  // Title of the notification.
  string title;

  // Body text of the notification.
  string message;

  // Optional URL to open when the tap action is invoked on the notification
  // main UI.
  url.mojom.Url action_url;

  // List of buttons in the notification.
  array<AssistantNotificationButton> buttons;

  // An id that uniquely identifies a notification on the client.
  string client_id;

  // An id that uniquely identifies a notification on the server.
  string server_id;

  // Used to fetch notification contents.
  string consistency_token;
  string opaque_token;

  // Key that can be used to group multiple notifications together.
  string grouping_key;

  // Obfuscated Gaia id of the intended recipient of the user.
  string obfuscated_gaia_id;

  // Priority for the notification. This affects whether or not the notification
  // will pop up and/or have the capability to wake the display if it was off.
  AssistantNotificationPriority priority = kDefault;

  // When the notification should expire.
  // Expressed as milliseconds since Unix Epoch.
  mojo_base.mojom.Time? expiry_time;

  // If |true|, the notification will be removed on click.
  bool remove_on_click = true;

  // If |true|, the user can't remove the notification.
  bool is_pinned = false;

  // If |true|, this notification was sent from the server. Clicking a
  // notification that was sent from the server may result in a request to the
  // server to retrieve the notification payload. One example of this would be
  // notifications triggered by an Assistant reminder.
  bool from_server = false;
};

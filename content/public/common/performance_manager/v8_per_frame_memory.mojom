// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module performance_manager.mojom;

import "mojo/public/mojom/base/unguessable_token.mojom";

// The amount of heap memory used by V8 in the context of a frame.
struct V8IsolatedWorldMemoryUsage {
  // The number of v8 heap bytes used by a V8 isolated world.
  uint64 bytes_used = 0;

  // An optional tag for this world that does not vary between browser sessions
  // or between renderers, unlike the world ID which can be randomly assigned.
  //
  // The exact meaning depends on the embedder and the type of isolated world.
  // For example Chrome extensions use the host ID, as per
  // extensions::ScriptInjection::GetHostIdForIsolatedWorld. Some types of
  // isolated world will not have a suitable tag so will leave this empty.
  string stable_id;

  // An optional human readable name for the world, for debugging. Unlike
  // stable_id this might not be unique.
  string human_readable_name;
};

// Returns the number of bytes used by the v8 heap per frame.
struct PerFrameV8MemoryUsageData {
  // The frame-unique token.
  mojo_base.mojom.UnguessableToken frame_token;

  // The resources used by this frame, mapped on the isolated world ID.
  // World ID 0 is the main world.
  map<int64, V8IsolatedWorldMemoryUsage> associated_bytes;
};

// Returns the number of bytes used by the v8 heap in a process.
struct PerProcessV8MemoryUsageData {
  // The number of v8 heap bytes that were not associated with a specific
  // v8 context, most likely because they're shared objects.
  uint64 unassociated_bytes_used;

  // The number of v8 contexts not associated with a frame, likely web
  // application leaks, and their associated byte usage. At the present time
  // (April 2020), it's expected and normal to see one unassociated context per
  // renderer process accounting for ~70kB.
  uint64 num_unassociated_contexts;
  uint64 unassociated_context_bytes_used;

  // The V8 memory usage by individual frames in this process.
  array<PerFrameV8MemoryUsageData> associated_memory;
};

// Allows a browser to query the resource usage of sub-processes.
interface V8PerFrameMemoryReporter {
  // Requests a per-frame estimate of v8 heap byte usage on the next garbage
  // collection. Note that this causes extra cost for the next garbage
  // collection, which can be on the order of 10-20%.
  GetPerFrameV8MemoryUsageData() => (PerProcessV8MemoryUsageData data);
};

